import{_ as a,c as i,o as n,S as e}from"./chunks/framework.Cc8IF7p9.js";const E=JSON.parse('{"title":"为什么你需要持久化你的视图到工作区？","description":"","frontmatter":{},"headers":[],"relativePath":"zh/articles/liam-cain/view/persistYourView.md","filePath":"zh/articles/liam-cain/view/persistYourView.md","lastUpdated":1756586890000}'),l={name:"zh/articles/liam-cain/view/persistYourView.md"};function p(t,s,h,k,r,d){return n(),i("div",null,[...s[0]||(s[0]=[e(`<h1 id="为什么你需要持久化你的视图到工作区" tabindex="-1">为什么你需要持久化你的视图到工作区？ <a class="header-anchor" href="#为什么你需要持久化你的视图到工作区" aria-label="Permalink to &quot;为什么你需要持久化你的视图到工作区？&quot;">​</a></h1><p>原文链接：<a href="https://liamca.in/Obsidian/API+FAQ/views/persisting+your+view+state" target="_blank" rel="noreferrer">Why you should be persisting your view&#39;s state to the workspace </a></p><p>作者：<a href="https://github.com/liamcain" target="_blank" rel="noreferrer">Liam Cain</a> <em>February 26, 2023</em></p><blockquote><p>Jay: 作为译者会以这种形式加上自己的想法和批注，帮助大家理解。</p><p>原博客的内部链接改为本文档的内部链接（即译文），并在后附上原文链接。</p></blockquote><hr><p>我审查过<a href="https://github.com/obsidianmd/obsidian-releases/pulls?q=is%3Apr+is%3Amerged+-label%3Atheme" target="_blank" rel="noreferrer">很多插件</a>，据我所知，只有少数几个插件正确地持久化了它们的插件视图状态。我认为问题在于 API 文档中对此描述不够充分，所以没有人真正知道正确的方法。</p><p>如果你的插件创建了自定义视图，那么它很可能会有一个相关的<em>状态</em>。状态可以是任何东西：一个开关是打开还是关闭、搜索查询或关联的文件。更多时候，我们选择将该状态设为<a href="https://liamca.in/ephemeral+state" target="_blank" rel="noreferrer">临时的</a> —— 我们将其作为视图的实例变量保存，当 Obsidian 重启时，这些状态就会丢失。*有什么替代方案吗？*好吧，插件真正能持久化数据的选项就是使用 <code>saveData</code> 和 <code>loadData</code>。或者你可能会想到使用 localStorage。</p><blockquote><p>&quot;临时的&quot;指向的文章链接失效。目前没有找到对应的文章。</p></blockquote><p>还有另一个选项：<code>View.getState</code> 和 <code>View.setState</code>。</p><p>这些方法允许你将<em>描述视图状态的数据</em>序列化到用户的工作区中。</p><h2 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h2><p>相比于将视图数据保存在插件的 data.json 文件中，这种方式有一些显著的优势。</p><h3 id="_1-数据是视图特定的" tabindex="-1">1. 数据是视图特定的 <a class="header-anchor" href="#_1-数据是视图特定的" aria-label="Permalink to &quot;1\\. 数据是视图特定的&quot;">​</a></h3><p>将数据保存在 View 中而不是保存到 Plugin 中意味着你可以启用多个视图副本，而无需在你这边进行任何额外的数据管理。</p><p>为什么我会想要创建多个视图副本？</p><p>这可能并不总是理想的选择，但对于反向链接或大纲这样的视图来说，拥有多个视图副本可能非常有用。用户可能会选择固定某个特定文件的大纲以便快速访问。</p><h3 id="_2-数据会自动序列化到-workspace-json-文件" tabindex="-1">2. 数据会自动序列化到 <code>workspace.json</code> 文件 <a class="header-anchor" href="#_2-数据会自动序列化到-workspace-json-文件" aria-label="Permalink to &quot;2\\. 数据会自动序列化到 \`workspace.json\` 文件&quot;">​</a></h3><p><code>workspace.json</code> 文件是你当前 Obsidian 布局的规范表示。它描述了哪些视图是打开的，侧边栏中有什么，你打开了哪些标签页和标签组，是否有任何堆叠的标签页等。</p><p>它也被<strong>工作区</strong>核心插件所使用。这意味着当用户在不同的工作区之间切换时，你的插件状态会自动存储和恢复。</p><h3 id="_3-数据仅在标签页存在期间保留" tabindex="-1">3. 数据仅在标签页存在期间保留 <a class="header-anchor" href="#_3-数据仅在标签页存在期间保留" aria-label="Permalink to &quot;3\\. 数据仅在标签页存在期间保留&quot;">​</a></h3><p>有时恢复到初始状态是很好的。假设你有一个带有很多花哨开关和过滤器的插件视图。用户可能会期望关闭标签页并打开一个新的标签页时能回到初始状态。将信息保存在视图中意味着一旦该标签页关闭，嘭！这些状态就消失了。</p><h2 id="什么时候不该使用-view-getstate-和-view-setstate" tabindex="-1">什么时候不该使用 <code>View.getState</code> 和 <code>View.setState</code> <a class="header-anchor" href="#什么时候不该使用-view-getstate-和-view-setstate" aria-label="Permalink to &quot;什么时候不该使用 \`View.getState\` 和 \`View.setState\`&quot;">​</a></h2><p>这些函数有其特定用途。它们不应该用于存储任何重要的用户数据。不应该存储任何无法反序列化的内容。不应该用于存储用户不希望在关闭标签页时丢失的任何数据。</p><p>一个简单的经验法则是：如果你在视图处于活动状态时重启 Obsidian，你的视图是否拥有继续工作所需的一切？</p><h2 id="闲话少说-如何copy" tabindex="-1">闲话少说，如何Copy? <a class="header-anchor" href="#闲话少说-如何copy" aria-label="Permalink to &quot;闲话少说，如何Copy?&quot;">​</a></h2><p>我们只需要在 View 子类中实现两个函数：</p><ul><li><code>getState</code></li><li><code>setState</code></li></ul><p>下面是一个如何在日历视图中使用 getState 和 setState 的示例。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ICalendarPersistedState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  displayedMonth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  selectedFilters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarView</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ItemView</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ICalendarPersistedState</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 持久化状态</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  displayedMonth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  selectedFilters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> leaf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WorkspaceLeaf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(leaf);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 初始化持久化状态</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.selectedFilters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.displayedMonth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // setState 用于将数据从 WorkspaceLeaf 传递到视图。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 当工作区布局被反序列化时，流程是：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // - 遍历序列化的工作区，当遇到叶子节点时，创建一个新的叶子节点。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // - 使用序列化的数据调用 setViewState</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // - 叶子节点根据数据中序列化的 \`type\` 确定其&quot;类型&quot;。如果叶子节点没有匹配该类型的视图，则创建一个新的视图。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // - 然后叶子节点在视图上调用 setState。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ICalendarPersistedState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViewStateResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 传入的 \`state\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (state.displayedMonth) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.displayedMonth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.displayedMonth;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (state.selectedFilters) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.selectedFilters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.selectedFilters;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state, result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 当叶子节点从视图请求数据时调用 getState。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 每当 Obsidian 对其布局进行更改时，它都会请求将布局序列化到 workspace.json。参见：&lt;Workspace.requestSaveLayout&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 在序列化布局时，流程是：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // - 工作区序列化每个拆分，每个拆分再序列化每个叶子节点。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // - 叶子节点使用 getState 从视图请求序列化数据。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // - 该数据被保存到 workspace.json。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ICalendarPersistedState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      displayedMonth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.displayedMonth,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      selectedFilters: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.selectedFilters,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setDisplayedMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Moment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.displayedMonth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 当你对视图的状态进行更改时，在你手动请求</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 保存布局之前，这些更改不会被保存到布局中。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.app.workspace.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestSaveLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div>`,29)])])}const g=a(l,[["render",p]]);export{E as __pageData,g as default};
