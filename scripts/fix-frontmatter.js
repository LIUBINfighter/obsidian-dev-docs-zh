import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import matter from 'gray-matter';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// 文档目录
const docsDir = path.resolve(__dirname, '../src/content/docs');

/**
 * 根据文件名生成更友好的标题
 * 处理规则：
 *  - 去掉常见前缀（obsidian-typings.）
 *  - 以点/连字符/下划线/驼峰分词
 *  - 首字母大写
 */
function generateTitleFromFilename(filePath) {
  const raw = path.basename(filePath, '.md');
  let name = raw;
  // 去前缀
  name = name.replace(/^obsidian-typings\./i, '');
  // 点替换为空格
  name = name.replace(/\./g, ' ');
  // 连字符和下划线替换为空格
  name = name.replace(/[-_]+/g, ' ');
  // 驼峰切分（在小写与大写之间加空格）
  name = name.replace(/([a-z\d])([A-Z])/g, '$1 $2');
  // 多空格压缩
  name = name.replace(/\s+/g, ' ').trim();
  // 单词首字母大写
  name = name.replace(/\b([a-z])(\w*)/g, (m, a, b) => a.toUpperCase() + b);
  return name || raw;
}

/**
 * 判断该文件是否为自动生成（包含特定标记）
 */
function isAutoGenerated(content) {
  return /automatically generated by API Documenter/i.test(content);
}

/**
 * 检查并修复文档文件的 frontmatter
 * @param {string} filePath - 文件路径
 */
function fixFrontmatter(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const parsed = matter(content);
  const frontmatter = parsed.data || {};
  const body = parsed.content ?? '';
  let modified = false;

  const isIndex = path.basename(filePath) === 'index.md';
  const autoGenerated = isAutoGenerated(content);

  // 仅当 title 缺失或为空字符串时才生成
  const needTitle = !frontmatter.title || (typeof frontmatter.title === 'string' && !frontmatter.title.trim());

  if (isIndex) {
    // 修复 index.md 的 hero.image
    if (frontmatter.hero && frontmatter.hero.image) {
      const image = frontmatter.hero.image;
      if (image.src && image.alt) {
        frontmatter.hero.image = { file: image.src };
        modified = true;
        console.log(`✅ 修复 ${filePath}: hero.image 格式已更新`);
      } else if (image.file || image.dark || image.light || image.html) {
        // 已是合法格式
      } else {
        frontmatter.hero.image = { file: '/logo.svg' };
        modified = true;
        console.log(`✅ 修复 ${filePath}: hero.image 设置为默认值`);
      }
    }
    if (needTitle) {
      frontmatter.title = generateTitleFromFilename(filePath);
      modified = true;
      console.log(`✅ 生成 ${filePath}: 添加首页标题 "${frontmatter.title}"`);
    }
  } else {
    if (needTitle) {
      const generatedTitle = generateTitleFromFilename(filePath);
      frontmatter.title = generatedTitle;
      modified = true;
      console.log(`✅ 生成 ${filePath}: 添加标题 "${generatedTitle}"` + (autoGenerated ? ' (auto-generated file)' : ''));
    }
    // 仅当 description 缺失时填充（不覆盖已有 & 不覆盖自动生成文件以避免噪音，可配置）
    if (!frontmatter.description && !autoGenerated) {
      frontmatter.description = `关于 ${frontmatter.title} 的文档`;
      modified = true;
      console.log(`✅ 生成 ${filePath}: 添加描述 "${frontmatter.description}"`);
    }
  }

  if (modified) {
    const newContent = matter.stringify(body.trimStart(), frontmatter).trim() + '\n';
    fs.writeFileSync(filePath, newContent, 'utf8');
  }
}

/**
 * 递归扫描目录，处理所有 .md 文件
 * @param {string} dir - 目录路径
 */
function scanDirectory(dir) {
  console.log(`🔍 扫描目录: ${dir}`);
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  console.log(`📄 找到 ${entries.length} 个条目`);

  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    console.log(`  - ${entry.isDirectory() ? '📁' : '📄'} ${entry.name}`);

    if (entry.isDirectory()) {
      scanDirectory(fullPath);
    } else if (entry.isFile() && entry.name.endsWith('.md')) {
      console.log(`  📝 处理文件: ${fullPath}`);
      fixFrontmatter(fullPath);
    }
  }
}

// 主函数
function main() {
  console.log('🔍 开始检查和修复文档元数据...');
  console.log('📁 扫描目录:', docsDir);

  if (!fs.existsSync(docsDir)) {
    console.error('❌ 文档目录不存在:', docsDir);
    return;
  }

  console.log('📂 目录存在，开始扫描...');
  scanDirectory(docsDir);
  console.log('✅ 元数据检查和修复完成！');
}

// 如果直接运行此脚本
if (import.meta.url === `file://${process.argv[1]}` || process.argv[1]?.endsWith('fix-frontmatter.js')) {
  main();
}

export default main;
